#!/bin/bash

# if any of the commands in your code fails for any reason, the entire script fails
set -o errexit
# fail exit if one of your pipe command fails
set -o pipefail
# exits if any of your variables is not set
set -o nounset


#can use prefer
#while ! nc -z $SQL_HOST $SQL_PORT; do
#    sleep 0.1
#    >&2 echo 'Waiting for PostgreSQL to become available...'
#done
#>&2 echo 'postgres OK.'


postgres_ready() {
python << END
import sys

import psycopg

try:
    psycopg.connect(
        dbname="${SQL_DB}",
        user="${SQL_USER}",
        password="${SQL_PASSWORD}",
        host="${SQL_HOST}",
        port="${SQL_PORT}",
    )
except psycopg.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  >&2 set | grep SQL
  sleep 5
  >&2 echo 'sleeping 5...'
done
>&2 echo 'PostgreSQL ok'


#If you have an image with an entrypoint pointing to entrypoint.sh, and you run your container as
#docker run my_image server start,
#that will translate to running entrypoint.sh server start in the container. At the exec line entrypoint.sh, the shell
#running as pid 1 will replace itself with the command server start.
exec "$@"